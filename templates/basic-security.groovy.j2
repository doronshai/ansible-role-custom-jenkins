#!groovy
import hudson.security.*
import hudson.model.*
import jenkins.model.*
import jenkins.security.plugins.ldap.FromGroupSearchLDAPGroupMembershipStrategy
import jenkins.security.plugins.ldap.LDAPGroupMembershipStrategy
import jenkins.model.IdStrategy
import org.jenkinsci.plugins.*
import hudson.model.AbstractDescribableImpl

// disable signup
def hudsonRealm = new HudsonPrivateSecurityRealm(false)
{% for account in cj_local_admin_users %}
    hudsonRealm.createAccount('{{ account.username }}', '{{ account.password }}')
{% endfor %}
{% for account in cj_local_regular_users %}
    hudsonRealm.createAccount('{{ account.username }}', '{{ account.password }}')
{% endfor %}
instance.setSecurityRealm(hudsonRealm)
instance.save()

def strategy = new hudson.security.ProjectMatrixAuthorizationStrategy()
{% for account in cj_local_admin_users %}
    strategy.add(Jenkins.ADMINISTER, "{{ account.username }}")
{% endfor %}
    {% for account in cj_local_regular_users %}
    //strategy.add(hudson.model.View.READ, "{{ account.username }}")
    //strategy.add(hudson.model.Item.READ, "{{ account.username }}")
    strategy.add(Jenkins.READ, "{{ account.username }}")
{% endfor %}
{% if cj_allow_anon_read is defined %}
    strategy.add(hudson.model.View.READ, 'anonymous')
    strategy.add(hudson.model.Item.READ, 'anonymous')
    strategy.add(Jenkins.READ, 'anonymous')
{% endif %}

instance.setAuthorizationStrategy(strategy)

{% if activedirectoy.enabled == true %}  

    def instance = Jenkins.getInstance();
    def ActiveDirectoryDomain adDomain = new ActiveDirectoryDomain("Example_Domain_Name_2", "Example_Domain_Controller_2");
    def domains = new ArrayList<ActiveDirectoryDomain>();
    domains.add(adDomain);

    def securityRealm = new ActiveDirectorySecurityRealm( 
    "", 
    domains,
    "", 
    "TEST-TEST",
    "",  
    "", 
    GroupLookupStrategy.RECURSIVE,
    false,
    true,
    null)
    println(securityRealm.domains)

    instance.setSecurityRealm(securityRealm) 
    instance.save()
{% endif %}