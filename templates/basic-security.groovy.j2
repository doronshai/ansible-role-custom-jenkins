#!groovy

import hudson.plugins.active_directory.*
import hudson.*
import hudson.model.*
import hudson.security.*
import jenkins.*
import jenkins.model.*
import com.michelin.cio.hudson.plugins.rolestrategy.*
import java.util.*
import java.lang.reflect.*

def env = System.getenv()

// Roles
def globalRoleRead = "GeneralView"
def globalRoleAdmin = "admin"
def ldapGroupNameAdmin = '{{ cj_local_admin_group[0].groupname }}'

def instance = Jenkins.getInstance()
def currentAuthenticationStrategy = Hudson.instance.getAuthorizationStrategy()

println "Checking if security has already been set"
if (!instance.isUseSecurity()) {
    {% if activedirectory.enabled == true %}  
        String domain = '{{ cj_AD_auth_domain }}'
        String site = '{{ cj_AD_auth_site }}'
        String server = '{{ cj_AD_auth_server }}'
        String bindName = '{{ cj_AD_auth_bindName }}'
        String bindPassword = '{{ cj_AD_auth_bindPassword }}'
        adrealm = new ActiveDirectorySecurityRealm(domain, site, bindName, bindPassword, server)
        instance.setSecurityRealm(adrealm)
        instance.save()
    {% endif %}
    {% if ldap.enabled == true %}  
        String server = "{{ ldap.host }}"
        String rootDN = "{{ ldap.rootDN }}"
        String userSearchBase = ''
        String userSearch = "{{ ldap.userSearch }}"
        String groupSearchBase = "{{ ldap.groupSearchBase }}"
        String groupSearchfilter = "{{ ldap.groupSearchfilter }}"
        LDAPGroupMembershipStrategy groupMembershipStrategy = "{{ ldap.membershipStrategyAttribute }}"
        String managerDN = "{{ ldap.managerDN }}"
        Secret managerPassword = "{{ ldap.managerPasswordSecret }}"
        boolean inhibitInferRootDN = false
        boolean disableMailAddressResolver = false
        CacheConfiguration cache = "{{ ldap.cache }}"
        String displayNameAttributeName = "{{ ldap.displayNameAttributeName }}"
        String mailAddressAttributeName = "mail"
        IdStrategy userIdStrategy = ""
        IdStrategy groupIdStrategy = ""
        SecurityRealm ldap_realm = new LDAPSecurityRealm(server, rootDN, userSearchBase, userSearch, groupSearchBase, groupSearchfilter, groupMembershipStrategy, managerDN, managerPassword, inhibitInferRootDN, disableMailAddressResolver, cache, environmentProperties, displayNameAttributeName,mailAddressAttributeName, userIdStrategy, groupIdStrategy)
        ldap_realm.isDisableRolePrefixing("{{ ldap.isDisableRolePrefixing }}")

        Jenkins.instance.setSecurityRealm(ldap_realm)
        Jenkins.instance.authorizationStrategy = new FullControlOnceLoggedInAuthorizationStrategy() ;
        Jenkins.instance.save()
    {% endif %}    

    Thread.start {
        sleep 15000
        if (currentAuthenticationStrategy instanceof RoleBasedAuthorizationStrategy) {
            println "Role based authorisation already enabled, Check if anonymous mode is required"
            // {% if cj_anonymous_mode is true %}
            // {% endif %}
            println "Exiting script..."
            return
        } else {
            println "Enabling role based authorisation strategy..."
        }

        // Set new authentication strategy
        RoleBasedAuthorizationStrategy roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()
        instance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)

        Constructor[] constrs = Role.class.getConstructors();
        for (Constructor<?> c : constrs) {
        c.setAccessible(true);
        }

        // Make the method assignRole accessible
        Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", String.class, Role.class, String.class);
        assignRoleMethod.setAccessible(true);

        // Create admin set of permissions
        Set<Permission> adminPermissions = new HashSet<Permission>();
        adminPermissions.add(Permission.fromId("hudson.model.View.Delete"));
        adminPermissions.add(Permission.fromId("hudson.model.View.Configure"));
        adminPermissions.add(Permission.fromId("hudson.model.View.Read"));
        adminPermissions.add(Permission.fromId("hudson.model.View.Create"));
        //
        adminPermissions.add(Permission.fromId("hudson.model.Computer.Connect"));
        adminPermissions.add(Permission.fromId("hudson.model.Computer.Create"));
        adminPermissions.add(Permission.fromId("hudson.model.Computer.Build"));
        adminPermissions.add(Permission.fromId("hudson.model.Computer.Disconnect"));
        adminPermissions.add(Permission.fromId("hudson.model.Computer.Configure"));
        adminPermissions.add(Permission.fromId("hudson.model.Computer.Delete"));
        //
        adminPermissions.add(Permission.fromId("hudson.model.Run.Delete"));
        adminPermissions.add(Permission.fromId("hudson.model.Run.Update"));
        adminPermissions.add(Permission.fromId("hudson.model.Run.Replay"));
        //
        adminPermissions.add(Permission.fromId("hudson.model.Hudson.UploadPlugins"));
        adminPermissions.add(Permission.fromId("hudson.model.Hudson.ConfigureUpdateCenter"));
        adminPermissions.add(Permission.fromId("hudson.model.Hudson.Administer"));
        adminPermissions.add(Permission.fromId("hudson.model.Hudson.RunScripts"));
        adminPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));
        //
        adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains"));
        adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.View"));
        adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Update"));
        adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Delete"));
        adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Create"));
        //
        adminPermissions.add(Permission.fromId("com.sonyericsson.hudson.plugins.gerrit.trigger.PluginImpl.Retrigger"));
        adminPermissions.add(Permission.fromId("com.sonyericsson.jenkins.plugins.bfa.PluginImpl.ViewCauses"));
        adminPermissions.add(Permission.fromId("com.sonyericsson.jenkins.plugins.bfa.PluginImpl.UpdateCauses"));
        adminPermissions.add(Permission.fromId("com.sonyericsson.jenkins.plugins.bfa.PluginImpl.RemoveCause"));
        adminPermissions.add(Permission.fromId("com.sonyericsson.hudson.plugins.gerrit.trigger.PluginImpl.ManualTrigger"));
        //
        adminPermissions.add(Permission.fromId("hudson.model.Item.Configure"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Cancel"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Read"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Discover"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Create"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Move"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Workspace"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Build"));
        adminPermissions.add(Permission.fromId("hudson.model.Item.Delete"));
        //
        adminPermissions.add(Permission.fromId("hudson.scm.SCM.Tag"));

        // Create the admin Role
        Role adminRole = new Role(globalRoleAdmin, adminPermissions);
        roleBasedAuthenticationStrategy.addRole(RoleBasedAuthorizationStrategy.GLOBAL, adminRole);
        println "Admin role created .... OK"

        // Assign the role
        roleBasedAuthenticationStrategy.assignRole(RoleBasedAuthorizationStrategy.GLOBAL, adminRole, ldapGroupNameAdmin);
        println "Admin role assigned ... OK"

        /// Read access for authenticated users
        // Create permissions
        Set<Permission> authenticatedPermissions = new HashSet<Permission>();
        authenticatedPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));
        authenticatedPermissions.add(Permission.fromId("hudson.model.Item.Read"));
        authenticatedPermissions.add(Permission.fromId("hudson.model.Item.Workspace"));
        authenticatedPermissions.add(Permission.fromId("hudson.model.Item.Discover"));

        Role authenticatedRole = new Role(globalRoleRead, authenticatedPermissions);
        roleBasedAuthenticationStrategy.addRole(RoleBasedAuthorizationStrategy.GLOBAL, authenticatedRole);
        println "GeneralView role created .... OK"

        // Assign the role
        roleBasedAuthenticationStrategy.assignRole(RoleBasedAuthorizationStrategy.GLOBAL, authenticatedRole, 'authenticated');
        println "GeneralView role assigned ... OK"

        // Save the state
        println "Saving changes."
        instance.save()
    }
    // def strategy = new hudson.security.ProjectMatrixAuthorizationStrategy()
    // {% for account in cj_local_admin_users %}
    // strategy.add(Jenkins.ADMINISTER, "{{ account.username }}")
    // {% endfor %}
    // {% for group in cj_local_admin_group %}
    // strategy.add(Jenkins.ADMINISTER, "{{ group.groupname }}")
    // {% endfor %}        
    // {% if cj_allow_anon_read is defined %}
    //     strategy.add(hudson.model.View.READ, 'anonymous')
    //     strategy.add(hudson.model.Item.READ, 'anonymous')
    //     strategy.add(Jenkins.READ, 'anonymous')
    // {% endif %}

    // instance.setAuthorizationStrategy(strategy)
    // instance.save()    
}